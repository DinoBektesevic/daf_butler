run: ingest
datastore:
  cls: lsst.daf.butler.datastores.posixDatastore.PosixDatastore
  root: ./butler_test_repository
  create: true
  storageClasses:
    StructuredDataDict:
      pytype: dict
      formatter: lsst.daf.butler.formatters.jsonFormatter.JsonFormatter
    StructuredDataList:
      pytype: list
      formatter: lsst.daf.butler.formatters.jsonFormatter.JsonFormatter
    StructuredData:
      # Data from a JSON or YAML file
      # type: dict
      pytype: examplePythonTypes.MetricsExample
      formatter: lsst.daf.butler.formatters.jsonFormatter.JsonFormatter
      components:
        # Components are those supported by get. We use the default formatter
        # though, and not the formatters associated with the components.
        summary: StructuredDataDict
        output: StructuredDataDict
        # Deliberately set this to the wrong type
        data: StructuredDataDict
    StructuredComposite:
      pytype: examplePythonTypes.MetricsExample
      assembler: lsst.daf.butler.core.composites.genericAssembler
      disassembler: lsst.daf.butler.core.composites.genericDisassembler
      components:
        summary: StructuredDataDict
        output: StructuredDataDict
        data: StructuredDataList
    TablePersistable:
      pytype: lsst.afw.table
    Image:
      pytype: lsst.afw.image.MaskedImage
    Catalog:
      pytype: lsst.afw.table.BaseCatalog
    SourceCatalog:
      pytype: lsst.afw.table.SourceCatalog
      formatter: lsst.daf.butler.formatters.fitsCatalogFormatter.FitsCatalogFormatter
    Exposure:
      pytype: lsst.afw.image.Exposure
      components:
        image: Image
        mask: Image
        variance: Image
        wcs: TablePersistable
        psf: TablePersistable
        photoCalib: TablePersistable
        visitInfo: TablePersistable
        apCorr: TablePersistable
        coaddInputs: TablePersistable
registry:
  cls: lsst.daf.butler.registries.sqlRegistry.SqlRegistry
  dbname: 'sqlite:///:memory:'
  id: 0
